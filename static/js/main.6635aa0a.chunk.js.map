{"version":3,"sources":["Components/User.js","Components/TodoItem.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","user","TodoItem","title","completed","className","Components_User","TodoList","todos","sortBy","value","onChange","defaultValue","map","todo","Components_TodoItem","key","id","name","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","disabled","filerParam","loadData","asyncToGenerator","regenerator_default","mark","_callee","url","response","response2","users","todosUsers","wrap","_context","prev","next","fetch","concat","sent","json","item","forEach","element","userId","objectSpread","console","log","setState","stop","onLoad","prevState","setTimeout","then","event","targetValue","target","copy","toConsumableArray","sort","b","localeCompare","filterParam","style","textTransform","Components_TodoList","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6635aa0a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction User(props) {\n    return (\n        <div>\n            {props.user}\n        </div>\n    )\n}\n\nexport default User","import React from 'react';\r\nimport User from './User'\r\n\r\nfunction TodoItem(props) {\r\n    let { title, completed, user } = props;\r\n    return (\r\n        <li className={completed ? \"done\" : \"not\"}>\r\n            <div className=\"left\">{title}</div>\r\n            <User user={user} />\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\nimport TodoItem from './TodoItem'\n\nfunction TodoList(props) {\n    const { todos, sortBy, value } = props;\n    return (\n        <div>\n            <div className=\"sorting\">\n                Sort by:\n                <select value={value} onChange={sortBy}>\n                    <option defaultValue>Select sorting</option>\n                    <option value=\"users\">By User names</option>\n                    <option value=\"todos\">By Todos</option>\n                </select>\n            </div>\n            <ul className=\"list\">\n                {todos.map(todo =>\n                    <TodoItem key={todo.id} user={todo.name} title={todo.title} completed={todo.completed} />\n                )}\n            </ul>\n        </div>\n    )\n}\n\nexport default TodoList;\n\n\n\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from './Components/TodoList'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      todos: [],\n      isLoaded: false,\n      disabled: false,\n      filerParam: null,\n      value: 'defaultValue'\n    }\n\n    this.loadData = async () => {\n      const url = 'https://jsonplaceholder.typicode.com/';\n      const response = await fetch(`${url}todos`);\n      const todos = await response.json();\n\n      const response2 = await fetch(`${url}users`);\n      const users = await response2.json();\n\n      const todosUsers = todos.map((item) => {\n\n        users.forEach(element => {\n          if (item.userId === element.id) {\n            item = { ...element, ...item };\n          }\n        });\n        return item\n      })\n      console.log(todosUsers);\n\n      this.setState({ todos: todosUsers });\n    }\n\n    this.onLoad = () => {\n      this.setState(prevState => {\n        return {\n          disabled: !prevState.disabled\n        }\n      });\n      setTimeout(() => {\n        this.loadData().then(this.setState({ isLoaded: true }))\n      }, 500)\n    }\n\n    this.sortBy = (event) => {\n      let targetValue = event.target.value;\n\n      this.setState(prevState => {\n        const copy = [...prevState.todos];\n        targetValue === 'todos'\n          ? copy.sort((a, b) => a.title.localeCompare(b.title))\n          : copy.sort((a, b) => a.name.localeCompare(b.name));\n\n        return {\n          filterParam: targetValue,\n          todos: copy\n        };\n      })\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 style={{ textTransform: 'uppercase' }}>Todos list</h1>\n        </header>\n        {this.state.isLoaded ? (\n          <TodoList\n            todos={this.state.todos}\n            value={this.state.value}\n            sortBy={this.sortBy}\n          />\n        ) : (\n            <button\n              onClick={this.onLoad}\n              className=\"btn_load\"\n              disabled={this.state.disabled}\n            >\n              {this.state.disabled ? \"Loading...\" : \"Load\"}\n            </button>\n          )}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n    // /then variant1\n    // const url = 'https://jsonplaceholder.typicode.com/';\n    // Promise.all([\n    //  fetch(`${url}todos`)\n    //    .then(response => { response.json()\n    //    .then(data => {this.setState{todos:data}})\n    //  }),\n    //  fetch(`${url}users`)\n    //    .then(response => { response.json()\n    //    .then(data => {this.setState{users:data}})\n    //  })\n    // ].then(this.setState.isloaded = true)\n\n\n    /// then variant2\n    // let datas = ['todos', 'uders'];\n    // let requests = names.map(data => fetch(`https://jsonplaceholder.typicode.com/${data}`));\n    // Promise.all(requests)\n    //   .then(responses => {\n    //     for (let response of responses) {\n    //       alert(`${response.url}: ${response.status}`); // shows 200 for every url\n    //     }\n    //     return responses;\n    //   })\n    //   .then(responses => Promise.all(responses.map(r => r.json())))\n    //   .then(data => datas.forEach(data => this.setState{data}));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}